\documentclass[english]{article}

\usepackage{geometry}
\geometry{verbose,tmargin=1in,bmargin=1in,lmargin=1in,rmargin=1in}
\usepackage{fancyhdr}
\pagestyle{fancy}
\setlength{\parskip}{\smallskipamount}
\setlength{\parindent}{0pt}
\usepackage{amsthm}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{amsmath}
\usepackage{hyperref}

\begin{document}

\title{Final lab - fMRI Data, Stat 215A, Fall 2017}


\author{Bryan Liu}

\maketitle

<<setup_chunks, echo = FALSE>>=
# set defaults for future code chunks
CACHE <- FALSE
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results='hide',
                      dev='png', dpi = 300, cache = CACHE)
@

<<libraries>>=
library(tidyverse)
library(glmnet)
library(caret)
source('./R/model_selection_utils.R')

@

<<load_data>>=
# load data and split into testing and train
data_path <- './data/'
source('./R/load_split_data.R')
@

<<load_results>>=
load('./R/results/correlations_lasso.RData')
load('./R/results/penalties_lasso.RData')

lasso_penalties_all <- as.data.frame(lasso_penalties_all)
lasso_correlations_all <- as.data.frame(lasso_correlations_all)

@


<<plotting_settings>>=
title_size <- 25
axis_title_size <- 20
axis_element_size <- 20

set_axis_size <- theme(axis.text=element_text(size=axis_element_size), 
                       axis.title = element_text(size=axis_title_size), 
                       plot.title = element_text(size=title_size))

blank_theme <-theme(panel.grid.major = element_blank(), 
                    panel.grid.minor = element_blank(),
                    panel.background = element_blank(), 
                    axis.line = element_line(colour = "black"))

@

\section{Introduction}
In this lab, we aim to predict fMRI signals in the 

\section{Models}

\subsection{Model selection}
<<model_selection_plots>>=
# we examine the selection for the first voxel

voxel <- 1
fit <- glmnet(feat_train, resp_train[, voxel])
lambdas <- fit$lambda # these are the penalties we will consider
  
# get pentalties for aic, aicc, and bic
lasso_IC_results <- select_lambda_IC(fit, feat_train, resp_train, voxel = voxel)
lasso_IC_results <- as.data.frame(lasso_IC_results)

# only consider those with reasonable degrees of freedom
# i.e. with less than 150 nonzero coefficients
lasso_IC_results_small_df <- lasso_IC_results %>% filter(df < 150) 
which_lambdas <- which(lasso_IC_results$df < 150)

# run CV
cvfit <- cv.glmnet(feat_train, resp_train[, voxel], lambda = lambdas, 
                   nfolds = 10, type.measure = 'mse')
lambda_cv <- cvfit$lambda.min

# run ES
es <- select_lambda_EC(feat_train, resp_train, lambda = lambdas, folds = 10, voxel = voxel)

es_constrained <- es[lambdas > lambda_cv] # we only consider more regularized models
lambda_escv <- lambdas[lambdas > lambda_cv][which.min(es_constrained)]

@

\begin{figure}[!h]
\centering
\begin{subfigure}[t]{0.25\textwidth}
\centering
<<AIC_plot>>=
lasso_IC_results_small_df %>% ggplot() + 
  geom_point(aes(x = lambda, y = aic), color = 'blue') + 
  geom_vline(xintercept = lasso_penalties_all[1, 'AIC'], linetype = 'dashed', color = 'red') + 
  ylab('AIC') + 
  blank_theme + set_axis_size
@
\subcaption{}
\end{subfigure}
\begin{subfigure}[t]{0.25\textwidth}
\centering
<<BIC_plot>>=
lasso_IC_results_small_df %>% ggplot() + 
  geom_point(aes(x = lambda, y = bic), color = 'blue') + 
  geom_vline(xintercept = lasso_penalties_all[1, 'BIC'], linetype = 'dashed', color = 'red') + 
  ylab('BIC') + 
  blank_theme + set_axis_size
@
\subcaption{}
\end{subfigure}
\begin{subfigure}[t]{0.25\textwidth}
\centering
<<AICc_plot>>=
lasso_IC_results_small_df %>% ggplot() + 
  geom_point(aes(x = lambda, y = aicc), color = 'blue') + 
  geom_vline(xintercept = lasso_penalties_all[1, 'AICc'], linetype = 'dashed', color = 'red') + 
  ylab('AICc') + 
  blank_theme + set_axis_size
@
\subcaption{}
\end{subfigure}\\
\begin{subfigure}[t]{0.25\textwidth}
\centering
<<CV_plot>>=
ggplot() + 
  geom_point(aes(x = cvfit$lambda[which_lambdas], y = cvfit$cvm[which_lambdas]), 
             color = 'blue') + 
  geom_vline(xintercept = cvfit$lambda.min, linetype = 'dashed', color = 'red') + 
  ylab('CV') + xlab('lambda') + 
  blank_theme + set_axis_size
@
\subcaption{}
\end{subfigure}
\begin{subfigure}[t]{0.25\textwidth}
\centering
<<ES_plot>>=
ggplot() + 
  geom_point(aes(x = lambdas[which_lambdas], y = es[which_lambdas]), color = 'blue') + 
  geom_vline(xintercept = cvfit$lambda.min, linetype = 'dashed') + 
  geom_vline(xintercept = lambda_escv, linetype = 'dashed', color = 'red') + 
  ylab('ES') + xlab('lambda') + 
  blank_theme + set_axis_size
@
\subcaption{}
\end{subfigure}
\caption{Selection of the LASSO penalty parameter $\lambda$ using (a) AIC, (b) BIC, (c) AICc, (d) cross-validation, and (e) estimation stability cross-validation. Red lines indicate the minimizer, giving the selected value of $\lambda$. In part (e), the black dashed line is the lambda selected by cross validation; we then select the smallest estimation-stability above this threshold. }
\end{figure}


\begin{figure}[!h]
\centering
\begin{subfigure}[t]{0.25\textwidth}
\centering
<<AIC_AICc_comparision>>=
lasso_penalties_all %>% ggplot() + 
  geom_point(aes(x = AIC, y = AICc), color = 'blue') + 
  geom_abline(slope = 1, intercept = 0, color = 'red', linetype = 'dashed') + 
  blank_theme + set_axis_size
@
\end{subfigure}
\begin{subfigure}[t]{0.25\textwidth}
\centering
<<CV_ESCV_comparision>>=
lasso_penalties_all %>% ggplot() + 
  geom_point(aes(x = CV, y = ESCV), color = 'blue') + 
  geom_abline(slope = 1, intercept = 0, color = 'red', linetype = 'dashed') + 
  blank_theme + set_axis_size
@
\end{subfigure}
\caption{Plotted are $\lambda$ chosen by different methods. (a) We compare the $\lambda$ chosen by AIC versus AICc; (b) we compare compare the $\lambda$ chosen by cross-validation versus estimation-stability cross-validation. In both plots, the red is a 45 degree line for reference.  }
\end{figure}

\section{Results} 
<<compare_corr_df>>=
lasso_cv_df_all <- c()
lasso_escv_df_all <- c()

for(voxel in 1:20){
  lasso_cv_df_all <- c(lasso_cv_df_all, 
                       glmnet(feat_train, resp_train[, voxel], 
                          lambda = lasso_penalties_all[voxel, 'CV'])$df)
  lasso_escv_df_all <- c(lasso_escv_df_all, 
                       glmnet(feat_train, resp_train[, voxel], 
                          lambda = lasso_penalties_all[voxel, 'ESCV'])$df)
}

lasso_df_results <- data.frame(voxels = c(1:20, 1:20), 
                               procedure = c(rep('CV', 20), rep('ESCV', 20)), 
                               df = c(lasso_cv_df_all, lasso_escv_df_all))

lasso_corr_results <- data.frame(voxels = c(1:20, 1:20), 
                               procedure = c(rep('CV', 20), rep('ESCV', 20)), 
                               corr = c(lasso_correlations_all[, 'CV'], 
                                      lasso_correlations_all[, 'ESCV']))




@

\begin{figure}
\centering
\begin{subfigure}[t]{0.4\textwidth}
<<df_comparre_plot>>=
lasso_df_results %>% 
  ggplot(aes(x = as.factor(voxels), y = df, fill = procedure, width = 0.6)) + 
  geom_bar(stat = 'Identity', position = "dodge") + 
  xlab('voxel') + ylab('number of nonzero coefficients') + 
  blank_theme + 
  theme(axis.title = element_text(size=axis_title_size), 
                       plot.title = element_text(size=title_size))
@
\subcaption{}
\end{subfigure}
\begin{subfigure}[t]{0.4\textwidth}
<<acc_compare_plot>>=
lasso_corr_results %>% 
  ggplot(aes(x = as.factor(voxels), y = corr, fill = procedure, width = 0.6)) + 
  geom_bar(stat = 'Identity', position = "dodge") + 
  xlab('voxel') + ylab('Accuracy (correlation)') + 
  blank_theme + 
  theme(axis.title = element_text(size=axis_title_size), 
                       plot.title = element_text(size=title_size))

@
\subcaption{}
\end{subfigure}
\caption{(a) We examine the number of nonzero coefficeints selected by lasso, with penalty chosen using CV or ESCV. (b) We compare the accuracy of having chosen $\lambda$ using CV or ESCV. }
\end{figure}

<<load_bootstrap_results>>=
load_bootstrap_results <- function(path = './R/results/bootstrap_results/'){
  # loads all the bootstrap fits into a list
  bootstrap_fits <- list()
  for(i in 1:200){
      file_name <- paste(path, 'bootstrap_sample_', i, '.RData', sep = '')
      load(file_name)
      
      bootstrap_fits[[i]] <- fit
  }
  
  return(bootstrap_fits)
}


bootstrap_fits <- load_bootstrap_results()


@



\end{document}
